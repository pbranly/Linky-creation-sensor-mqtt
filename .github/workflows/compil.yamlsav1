name: "Build & Push Docker Image"

on:
  workflow_dispatch:
    inputs:
      BUILD_TYPE:
        description: "Type de build"
        required: true
        type: choice
        options:
          - "branch"
          - "tag"
        default: "branch"
      BRANCH_NAME:
        description: "Nom de la branche (si BUILD_TYPE = branch)"
        required: false
        default: "main"
      TAG_NAME:
        description: "Nom du tag (si BUILD_TYPE = tag)"
        required: false
        default: ""
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths-ignore:
      - "**.md"
      - ".github/**"

env:
  DOCKERHUB_USERNAME: "pbranly"
  IMAGE_NAME: "linkycreationdockermqtt"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      # 1Ô∏è‚É£ D√©terminer la source et le checkout appropri√©
      - name: D√©terminer la source
        id: source
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.BUILD_TYPE }}" = "branch" ]; then
              echo "source_type=branch" >> $GITHUB_OUTPUT
              echo "source_ref=${{ github.event.inputs.BRANCH_NAME }}" >> $GITHUB_OUTPUT
              echo "image_suffix=latest-${{ github.event.inputs.BRANCH_NAME }}" >> $GITHUB_OUTPUT
            else
              echo "source_type=tag" >> $GITHUB_OUTPUT
              echo "source_ref=${{ github.event.inputs.TAG_NAME }}" >> $GITHUB_OUTPUT
              echo "image_suffix=${{ github.event.inputs.TAG_NAME }}" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.ref_type }}" = "tag" ]; then
            echo "source_type=tag" >> $GITHUB_OUTPUT
            echo "source_ref=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "image_suffix=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "source_type=branch" >> $GITHUB_OUTPUT
            echo "source_ref=main" >> $GITHUB_OUTPUT
            echo "image_suffix=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          fi

      # 2Ô∏è‚É£ Cloner le d√©p√¥t depuis la source appropri√©e
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.source.outputs.source_ref }}

      # 3Ô∏è‚É£ Pr√©parer les tags Docker
      - name: Pr√©parer les tags Docker
        id: docker_tags
        run: |
          BASE_TAG="${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
          
          if [ "${{ steps.source.outputs.source_type }}" = "tag" ]; then
            # Pour les tags : cr√©er image avec num√©ro du tag + latest
            echo "tags=${BASE_TAG}:${{ steps.source.outputs.image_suffix }},${BASE_TAG}:latest" >> $GITHUB_OUTPUT
            echo "main_tag=${{ steps.source.outputs.image_suffix }}" >> $GITHUB_OUTPUT
          else
            # Pour les branches : cr√©er image avec latest-branche (+ latest si c'est main)
            if [ "${{ steps.source.outputs.source_ref }}" = "main" ]; then
              echo "tags=${BASE_TAG}:${{ steps.source.outputs.image_suffix }},${BASE_TAG}:latest" >> $GITHUB_OUTPUT
            else
              echo "tags=${BASE_TAG}:${{ steps.source.outputs.image_suffix }}" >> $GITHUB_OUTPUT
            fi
            echo "main_tag=${{ steps.source.outputs.image_suffix }}" >> $GITHUB_OUTPUT
          fi

      # 4Ô∏è‚É£ V√©rifier que le secret DockerHub est bien pr√©sent
      - name: V√©rifier variables
        run: |
          echo "DOCKERHUB_USERNAME = $DOCKERHUB_USERNAME"
          echo "IMAGE_NAME = $IMAGE_NAME"
          echo "SOURCE_TYPE = ${{ steps.source.outputs.source_type }}"
          echo "SOURCE_REF = ${{ steps.source.outputs.source_ref }}"
          echo "MAIN_TAG = ${{ steps.docker_tags.outputs.main_tag }}"
          echo "DOCKER_TAGS = ${{ steps.docker_tags.outputs.tags }}"
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "‚ùå DOCKERHUB_TOKEN est vide"
            exit 1
          else
            echo "‚úÖ DOCKERHUB_TOKEN est d√©fini"
          fi

      # 5Ô∏è‚É£ Configurer Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6Ô∏è‚É£ Login DockerHub
      - name: Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 7Ô∏è‚É£ Build et Push l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 8Ô∏è‚É£ Afficher le r√©sultat
      - name: R√©sultat
        run: |
          echo "‚úÖ Image construite et pouss√©e avec succ√®s !"
          echo "üéØ Source: ${{ steps.source.outputs.source_type }} (${{ steps.source.outputs.source_ref }})"
          echo ""
          echo "üì¶ Images cr√©√©es:"
          IFS=',' read -ra TAGS <<< "${{ steps.docker_tags.outputs.tags }}"
          for tag in "${TAGS[@]}"; do
            echo "  - $tag"
          done
